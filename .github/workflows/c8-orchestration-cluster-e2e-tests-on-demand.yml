---
name: C8 Orchestration Cluster E2E Tests On Demand

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Enter the branch to test"
        required: true
        default: "main"

permissions:
  contents: read

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if branch exists
        run: |
          echo "Checking if branch '${{ github.event.inputs.branch }}' exists..."
          branch_name="${{ github.event.inputs.branch }}"
          branch_check=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/branches/$branch_name)

          if [[ "$branch_check" != "200" ]]; then
            echo "Error: Branch '$branch_name' does not exist (HTTP $branch_check)."
            exit 1
          fi

          echo "Branch '$branch_name' exists."

  c8-orchestration-cluster-e2e-tests:
    needs: validate-branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }} # Use the branch selected by the user

      - name: Start Camunda
        run: |
          DATABASE=elasticsearch docker compose up -d camunda
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: List running Docker containers
        run: docker ps -a
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Wait for services to be ready
        id: wait-for-services
        run: |
          echo "Checking if services are up..."
          ready=false
          for i in {1..90}; do
            if ! nc -zv localhost 8080; then
              echo "Port 8080 is not open yet..."
            fi

            # Check if pages are available 
            tasklist_status=$(curl -s -m 5 http://localhost:8080/tasklist || echo "Failed")
            operate_status=$(curl -s -m 5 http://localhost:8080/operate || echo "Failed")
            identity_status=$(curl -s -m 5 http://localhost:8080/identity || echo "Failed")

            # Check if services are up
            if [[ "$tasklist_status" != "Failed" ]] && [[ "$operate_status" != "Failed" ]] && [[ "$identity_status" != "Failed" ]]; then
              echo "Services are ready!"
              ready=true
              break
            fi

            echo "Waiting for services... ($i/90)"
            echo "Response from tasklist: $tasklist_status"
            echo "Response from operate: $operate_status"
            echo "Response from identity: $identity_status"
            sleep 10
          done

          if [ "$ready" == "true" ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "Services failed to start in time."
            exit 1
          fi

      - name: Print Docker logs before failing
        if: failure()
        run: |
          docker compose logs camunda
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: qa/c8-orchestration-cluster-e2e-test-suite/package-lock.json

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --verbose
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/github.com/organizations/camunda TESTRAIL_QA_EMAIL;
            secret/data/github.com/organizations/camunda TESTRAIL_QA_PSW;

      - name: Install Playwright Browsers
        shell: bash
        run: npx playwright install --with-deps chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Python setup
        if: always()
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run tests
        shell: bash
        env:
          LOCAL_TEST: "false"
          CORE_APPLICATION_URL: http://localhost:8080
          CAMUNDA_AUTH_STRATEGY: "BASIC"
          CAMUNDA_BASIC_AUTH_USERNAME: "demo"
          CAMUNDA_BASIC_AUTH_PASSWORD: "demo"
          ZEEBE_REST_ADDRESS: "http://localhost:8080"
        run: npm run test -- --project=chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Publish test results to TestRail
        if: always()
        shell: bash
        env:
          TESTRAIL_HOST: "https://camunda.testrail.com/"
          TESTRAIL_USERNAME: ${{ steps.secrets.outputs.TESTRAIL_QA_EMAIL }} # Use the imported secret
          TESTRAIL_KEY: ${{ steps.secrets.outputs.TESTRAIL_QA_PSW }} # Use the imported secret
          JUNIT_RESULTS_FILE: "qa/c8-orchestration-cluster-e2e-test-suite/test-results/junit-report.xml"
        run: |
          pip install trcli
          trcli -y -h "$TESTRAIL_HOST" \
            --project 'C8' \
            --username "$TESTRAIL_USERNAME" \
            --key "$TESTRAIL_KEY" \
            parse_junit --suite-id 17050 \
            --title "On Demand C8 Orchestration Cluster Test Run Results -  ${{ github.event.inputs.branch }}" \
            --close-run \
            -f "$JUNIT_RESULTS_FILE"

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: C8 Orchestration Cluster E2E Test Result
          path: qa/c8-orchestration-cluster-e2e-test-suite/html-report
          retention-days: 10
