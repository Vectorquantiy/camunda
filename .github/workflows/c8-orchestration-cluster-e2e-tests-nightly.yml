name: C8 Orchestration Cluster E2E Tests Nightly

on:
  schedule:
    - cron: "0 0 * * *" # Run all tests at midnight UTC

permissions:
  contents: read

jobs:
  nightly-tests:
    strategy:
      fail-fast: false
      matrix:
        branch: [stable/8.6, stable/8.7, main]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - name: Start Camunda Services
        run: |
          if [[ "${{ matrix.branch }}" == "stable/8.6" || "${{ matrix.branch }}" == "stable/8.7" ]]; then
            echo "Using single services for stable branch"
            DATABASE=elasticsearch docker compose up -d operate tasklist 
          else
            echo "Using standalone camunda container"
            DATABASE=elasticsearch docker compose up -d camunda
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: List running Docker containers
        run: docker ps -a
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Wait for services to be ready
        id: wait-for-services
        run: |
          echo "Checking if services are up..."
          ready=false
          for i in {1..90}; do
            if [[ "${{ matrix.branch }}" == "stable/8.6" || "${{ matrix.branch }}" == "stable/8.7" ]]; then
              tasklist_status=$(curl -s -m 5 http://localhost:8082 || echo "Failed")
              operate_status=$(curl -s -m 5 http://localhost:8081 || echo "Failed")
              if [[ "$tasklist_status" != "Failed" && "$operate_status" != "Failed" ]]; then
                echo "Services are ready!"
                ready=true
                break
              fi
            else
              tasklist_status=$(curl -s -m 5 http://localhost:8080/tasklist || echo "Failed")
              operate_status=$(curl -s -m 5 http://localhost:8080/operate || echo "Failed")
              identity_status=$(curl -s -m 5 http://localhost:8080/identity || echo "Failed")
              if [[ "$tasklist_status" != "Failed" && "$operate_status" != "Failed" && "$identity_status" != "Failed" ]]; then
                echo "Services are ready!"
                ready=true
                break
              fi
            fi

            echo "Waiting for services... ($i/90)"
            echo "Tasklist: $tasklist_status"
            echo "Operate: $operate_status"
            [[ -n "$identity_status" ]] && echo "Identity: $identity_status"
            sleep 10
          done

          if [ "$ready" = true ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "Services failed to start in time."
            exit 1
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Print Docker logs before failing
        if: failure()
        run: |
          if [[ "${{ matrix.branch }}" == "stable/8.6" || "${{ matrix.branch }}" == "stable/8.7" ]]; then
            docker compose logs tasklist
            docker compose logs operate
          else
            docker compose logs camunda
          fi
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite/config

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: qa/c8-orchestration-cluster-e2e-test-suite/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false
          secrets: |
            secret/data/github.com/organizations/camunda TESTRAIL_QA_EMAIL;
            secret/data/github.com/organizations/camunda TESTRAIL_QA_PSW;
            secret/data/products/camunda/ci/github-actions SLACK_CORE_DOMAIN_BOT_TOKEN;

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Python setup
        if: always()
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run tests
        env:
          LOCAL_TEST: "false"
          CAMUNDA_AUTH_STRATEGY: "BASIC"
          CAMUNDA_BASIC_AUTH_USERNAME: "demo"
          CAMUNDA_BASIC_AUTH_PASSWORD: "demo"
          INCLUDE_SLACK_REPORTER: true
          SLACK_BOT_USER_OAUTH_TOKEN: ${{ steps.secrets.outputs.SLACK_CORE_DOMAIN_BOT_TOKEN }}
          VERSION: ${{ matrix.branch }}
        run: |
          if [[ "${{ matrix.branch }}" == "stable/8.6" || "${{ matrix.branch }}" == "stable/8.7" ]]; then
            export CORE_APPLICATION_TASKLIST_URL="http://localhost:8082"
            export CORE_APPLICATION_OPERATE_URL="http://localhost:8081"
            export ZEEBE_REST_ADDRESS="http://localhost:8089"
          else
            export CORE_APPLICATION_URL="http://localhost:8080"
            export ZEEBE_REST_ADDRESS="http://localhost:8080"
          fi

          npm run test -- --project=chromium
        working-directory: qa/c8-orchestration-cluster-e2e-test-suite

      - name: Publish test results to TestRail
        if: always()
        env:
          TESTRAIL_HOST: "https://camunda.testrail.com/"
          TESTRAIL_USERNAME: ${{ steps.secrets.outputs.TESTRAIL_QA_EMAIL }}
          TESTRAIL_KEY: ${{ steps.secrets.outputs.TESTRAIL_QA_PSW }}
          JUNIT_RESULTS_FILE: "qa/c8-orchestration-cluster-e2e-test-suite/test-results/junit-report.xml"
          BRANCH_NAME: ${{ matrix.branch }}
        run: |
          pip install trcli
          trcli -y -h "$TESTRAIL_HOST" \
            --project 'C8' \
            --username "$TESTRAIL_USERNAME" \
            --key "$TESTRAIL_KEY" \
            parse_junit --suite-id 17050 \
            --title "Nightly C8 Orchestration Cluster Test Results - $BRANCH_NAME - $(date '+%Y-%m-%d %H:%M:%S')" \
            --close-run \
            -f "$JUNIT_RESULTS_FILE"
