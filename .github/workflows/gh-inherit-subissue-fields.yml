# This workflow automatically inherits the 'Project Name' and 'Team' fields from a parent sub-issue
# if the parent is in Project 173 (Core Features only). It ensures that sub-issues are correctly
# associated with the same project and team as their parent, maintaining project consistency.
#
# The workflow triggers on issue creation or edit events, checks for a parent sub-issue relationship,
# and, if found, copies the relevant fields from the parent to the child issue in the GitHub project.
#
# owner: @camunda/core-features

name: Inherit Project & Team from Parent Sub-Issue (Project 173 which is Core Features only )

on:
  issues:
    types: [opened, edited]

jobs:
  inherit-from-parent: # owner: @camunda/core-features
    permissions:
      issues: write
      contents: write
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Inherit fields from parent sub-issue if parent is in project 173(PVT_kwDOACVKPs4A1Kno)
        uses: actions/github-script@v7
        with:
          script: |
            const { graphql } = require('@octokit/graphql');
            const token = process.env.GITHUB_TOKEN;
            const ghql = graphql.defaults({ headers: { authorization: `token ${token}` } });
            const octokit = github;

            const TARGET_PROJECT_ID = "PVT_kwDOACVKPs4A1Kno";

            const issueNumber = context.payload.issue.number;

            // 1. Get timeline events for this issue (child)
            const events = await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/timeline', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // 2. Find parent from sub-issue relationship
            const subLink = events.data.find(e =>
              e.event === 'connected' &&
              e.sub_issue &&
              e.source &&
              e.source.issue
            );

            if (!subLink) {
              console.log("No parent sub-issue link found. Skipping.");
              return;
            }

            const parentNumber = subLink.source.issue.number;

            // 3. Fetch parent & child info including project items and fields
            async function getIssueInfo(number) {
              const data = await ghql(`
                query($owner:String!, $repo:String!, $number:Int!) {
                  repository(owner:$owner, name:$repo) {
                    issue(number:$number) {
                      id
                      projectItems(first:5) {
                        nodes {
                          id
                          project {
                            id
                            title
                            fields(first:20) {
                              nodes {
                                id
                                name
                                dataType
                                ... on ProjectV2SingleSelectField {
                                  options { id name }
                                }
                              }
                            }
                          }
                          fieldValues(first:20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                field { ... on ProjectV2SingleSelectField { id name } }
                                option { id name }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, { owner: context.repo.owner, repo: context.repo.repo, number });
              return data.repository.issue;
            }

            const parentIssue = await getIssueInfo(parentNumber);
            const childIssue = await getIssueInfo(issueNumber);

            if (parentIssue.projectItems.nodes.length === 0) {
              console.log("Parent has no project item. Skipping.");
              return;
            }

            // 4. Check if parent is in the target project
            const parentItem = parentIssue.projectItems.nodes.find(item => item.project.id === TARGET_PROJECT_ID);
            if (!parentItem) {
              console.log(`Parent is not in the target project (${TARGET_PROJECT_ID}). Skipping.`);
              return;
            }

            const projectId = parentItem.project.id;

            // 5. Helper to get field and option IDs for given field name
            function getFieldOptionId(fieldName) {
              const fieldDef = parentItem.project.fields.nodes.find(f => f.name === fieldName);
              const fieldValue = parentItem.fieldValues.nodes.find(v => v.field?.name === fieldName);
              if (!fieldDef || !fieldValue) return null;
              return { fieldId: fieldDef.id, optionId: fieldValue.option.id };
            }

            const projectNameData = getFieldOptionId("PH Project name");
            const teamData = getFieldOptionId("Team");

            // 6. Add child to same project if not already added
            let childItemId;
            if (childIssue.projectItems.nodes.length === 0) {
              const addChildItemRes = await ghql(`
                mutation($projectId:ID!, $contentId:ID!) {
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                    item { id }
                  }
                }
              `, { projectId, contentId: childIssue.id });
              childItemId = addChildItemRes.addProjectV2ItemById.item.id;
            } else {
              // If already in project, pick the matching project item id
              const existingItem = childIssue.projectItems.nodes.find(item => item.project.id === TARGET_PROJECT_ID);
              if (!existingItem) {
                console.log("Child is not in the target project but is in others â€” adding now.");
                const addChildItemRes = await ghql(`
                  mutation($projectId:ID!, $contentId:ID!) {
                    addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                      item { id }
                    }
                  }
                `, { projectId, contentId: childIssue.id });
                childItemId = addChildItemRes.addProjectV2ItemById.item.id;
              } else {
                childItemId = existingItem.id;
              }
            }

            // 7. Update child project item fields with parent's values
            const updates = [];
            if (projectNameData) {
              updates.push(ghql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:ID!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) { projectV2Item { id } }
                }
              `, { projectId, itemId: childItemId, fieldId: projectNameData.fieldId, optionId: projectNameData.optionId }));
            }
            if (teamData) {
              updates.push(ghql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:ID!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) { projectV2Item { id } }
                }
              `, { projectId, itemId: childItemId, fieldId: teamData.fieldId, optionId: teamData.optionId }));
            }

            try {
              await Promise.all(updates);
            } catch (error) {
              console.error("Failed to update child project item fields with parent's values:", error);
              throw error;
            }

            console.log(`Inherited Project Name & Team from parent #${parentNumber} in project ${projectId}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
