# owner: @vheinila
name: Issue Migration Labeler

permissions:
  contents: read
  issues: write

on:
  workflow_dispatch:
    
jobs:
  label_migrated_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Label migrated issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Define labeling schemes as an array of objects
            const labelingSchemes = [
              {
                labelsToCheck: ['component:frontend'],
                labelToAdd: 'component/frontend',
              },
              {
                labelsToCheck: ['easy-pick'],
                labelToAdd: 'good first issue',
              },
              {
                labelsToCheck: ['technical-debt'],
                labelToAdd: 'tech-dept',
              },
              // Add more labeling schemes here if needed (Current setup is for Operate)
            ];

            // Function to add labels to issues
            async function addLabelToIssues(labelingScheme) {
              for (const label of labelingScheme.labelsToCheck) {
                let page = 1;
                let batch;

                do {
                  batch = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: label,
                    state: 'open',
                    per_page: 100,
                    page: page
                  });

                  for (const issue of batch.data) {
                    if (!issue.labels.some(issueLabel => issueLabel.name === labelingScheme.labelToAdd)) {
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issue.number,
                        labels: [labelingScheme.labelToAdd]
                      });
                    }
                  }
                  page++;
                } while (batch.data.length === 100);
              }
            }

            // Process each labeling scheme
            for (const labelingScheme of labelingSchemes) {
              await addLabelToIssues(labelingScheme);
            }
